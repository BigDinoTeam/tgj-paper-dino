@startuml

class World {
	List<DynamicEntity> dynamicEntities
	List<StationaryEntity> stationaryEntities
	Player player
	update()
	render()
}

class Grid {
	Cell[][] cells
	render()
	 insert(Piece[][] pieces, int[] position)
}

class Cell {
	List<Piece> pieces
	render()
}

class Piece {
	Entity entity
	boolean walkable
	render()
}

abstract class Entity {
	static Image sprite
	Piece[][] pieces
	int[2] position
	Entity(World world, int[] position)
}

package entities{

	abstract class StationaryEntity extends Entity{
		StationaryEntity(int[] position)
	}

	package stationary {
		class Nest extends StationaryEntity {
			Nest(World world, int[] position)
			float[] paperProbabilities
		}

		class Building extends StationaryEntity {
			AI dino
			int type // 0: House
			Building(World world, int type, int[] position)
		}
	}


	abstract class DynamicEntity extends Entity {
		World world
		DynamicEntity(World world, int[] position)
		update()
		move()
	}

	package dynamic{
		class Dino extends DynamicEntity{
			Dino(World world, int[] position)
		}

		class Paper extends DynamicEntity {
			SpeciesColor color
			float[2] speed
			Paper(World world, int[] position)
		}

		package dinos{
			class AI extends Dino {
				Building building
				SpeciesColor color
				Activity activity
				boolean pacified
				AI(World world, int[] position)
			}

			class Player extends Dino {
				int[] paperCounts
				int[] paperMaxCounts
				SpeciesColor selectedPaper
				collectPapers()
				selectPaper()
				throwPaper()
				punchWithPaper()
				Player(World world, int[] position)
			}
		}
	}
}

enum Activity {
	wandering
	resting
	hangry
}

enum SpeciesColor {
	red
	blue
}

World "0"--down"1" Grid
World "1"--down"*" DynamicEntity
World "1"--down"*" StationaryEntity
World "0"--"1" Player
Grid "0"--down"*" Cell
Cell "0"--right"*" Piece
Piece "+"--right"1" Entity
Building "1"--"1" AI
AI -- Activity
AI -- SpeciesColor
Player -- SpeciesColor
Paper -- SpeciesColor

@enduml
